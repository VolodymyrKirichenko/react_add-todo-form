{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/ui/Input/Input.tsx","api/users.ts","components/ui/Select/Select.tsx","components/App/helpers/app.heplers.tsx","api/todos.ts","components/App/App.tsx","index.tsx"],"names":["UserInfo","props","user","className","href","email","name","TodoInfo","todo","title","id","completed","Paper","elevation","classNames","TodoList","todos","map","Input","isTitleError","handleChange","TextField","color","error","autoComplete","sx","width","label","variant","value","onChange","cn","isError","username","SelectUi","hasSelectedError","setSelectedUser","selectedUser","FormControl","m","margin","InputLabel","Select","labelId","e","target","input","OutlinedInput","usersFromServer","MenuItem","findUserById","userId","find","preparedTodos","currentUser","App","useState","todoList","setTodoList","setTitle","setIsTitleError","setHasSelectedError","Box","backgroundColor","onSubmit","event","preventDefault","trim","newTodo","Math","max","Number","currentTodos","Button","endIcon","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.30ac8652.chunk.js","sourcesContent":["import { FC } from 'react';\nimport { User } from '../../types/app.typedefs';\n\ninterface Props {\n  user: User,\n}\n\nexport const UserInfo: FC<Props> = (props) => {\n  const { user } = props;\n\n  return (\n    <a className=\"userInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport Paper from '@mui/material/Paper';\nimport { PreparedTodo } from '../../types/app.typedefs';\nimport { UserInfo } from '../UserInfo';\n\ninterface Props {\n  todo: PreparedTodo,\n}\n\nexport const TodoInfo: FC<Props> = ({ todo }) => {\n  const {\n    title,\n    id,\n    user,\n    completed,\n  } = todo;\n\n  return (\n    <Paper elevation={2}>\n      <article\n        data-id={id}\n        className={classNames('todoInfo', {\n          'todoInfo--completed': completed,\n        })}\n      >\n        <h2 className=\"todoInfo__title\">\n          {title}\n        </h2>\n\n        {user && (\n          <UserInfo user={user} />\n        )}\n      </article>\n    </Paper>\n  );\n};\n","import { FC } from 'react';\nimport { PreparedTodo } from '../../types/app.typedefs';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: PreparedTodo[];\n}\n\nexport const TodoList: FC<Props> = (props) => {\n  const { todos } = props;\n\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","import TextField from '@mui/material/TextField';\nimport cn from 'classnames';\nimport React, { FC } from 'react';\n\ninterface Props {\n  title: string;\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  isTitleError: boolean;\n}\n\nexport const Input: FC<Props> = (props) => {\n  const { title, isTitleError, handleChange } = props;\n\n  return (\n    <div className=\"field\">\n      <div className=\"input\">\n        <TextField\n          color={isTitleError ? 'error' : 'primary'}\n          error={isTitleError}\n          autoComplete=\"off\"\n          sx={{ width: 300 }}\n          id=\"outlined-basic\"\n          label=\"Message\"\n          variant=\"outlined\"\n          value={title}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div\n        className={cn('error', { isError: isTitleError })}\n      >\n        Please enter a title\n      </div>\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { FC } from 'react';\nimport FormControl from '@mui/material/FormControl';\nimport InputLabel from '@mui/material/InputLabel';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport MenuItem from '@mui/material/MenuItem';\nimport cn from 'classnames';\nimport Select from '@mui/material/Select';\nimport usersFromServer from '../../../api/users';\n\ninterface Props {\n  selectedUser: string;\n  setSelectedUser: (user: string) => void;\n  hasSelectedError: boolean;\n}\n\nexport const SelectUi: FC<Props> = (props) => {\n  const { hasSelectedError, setSelectedUser, selectedUser } = props;\n\n  return (\n    <div className=\"field\">\n      <div className=\"input\">\n        <FormControl sx={{ m: 1, width: 300, margin: 0 }}>\n          <InputLabel\n            id=\"demo-multiple-name-label\"\n            color={!selectedUser && hasSelectedError ? 'error' : 'primary'}\n          >\n            Name\n          </InputLabel>\n\n          <Select\n            color={!selectedUser && hasSelectedError ? 'error' : 'primary'}\n            error={!selectedUser && hasSelectedError}\n            labelId=\"demo-multiple-name-label\"\n            id=\"demo-multiple-name\"\n            value={selectedUser}\n            onChange={(e) => (\n              setSelectedUser(e.target.value))}\n            input={<OutlinedInput label=\"Name\" />}\n          >\n            {usersFromServer.map((user) => {\n              const { id, name } = user;\n\n              return (\n                <MenuItem\n                  key={id}\n                  value={id}\n                >\n                  {name}\n                </MenuItem>\n              );\n            })}\n          </Select>\n        </FormControl>\n      </div>\n\n      <div\n        className={cn('error', {\n          isError: (!selectedUser && hasSelectedError),\n        })}\n      >\n        Please choose a user\n      </div>\n    </div>\n  );\n};\n","import { PreparedTodo, User } from '../../../types/app.typedefs';\nimport usersFromServer from '../../../api/users';\nimport todosFromServer from '../../../api/todos';\n\nexport const findUserById = (userId: number): User | null => (\n  usersFromServer.find(user => user.id === userId) || null\n);\n\nexport const preparedTodos: PreparedTodo[] = todosFromServer.map(todo => {\n  const currentUser = findUserById(todo.userId);\n\n  return {\n    ...todo,\n    user: currentUser,\n  };\n});\n\nexport const getTodoId = (todos: PreparedTodo[]) => {\n  const newId = Math.max(...todos.map(todo => todo.id));\n\n  return newId + 1;\n};\n","export default [\n  {\n    id: 1,\n    title: 'Your code is beautiful',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'Better than anything I\\'ve ever seen',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'I agree with the person above',\n    completed: true,\n    userId: 4,\n  },\n  {\n    id: 3,\n    title: 'And I\\'m a hater, so I can\\'t say anything good',\n    completed: false,\n    userId: 4,\n  },\n];\n","import './App.scss';\nimport React, { useState } from 'react';\nimport Button from '@mui/material/Button';\nimport SendIcon from '@mui/icons-material/Send';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport { TodoList } from '../TodoList';\nimport { PreparedTodo } from '../../types/app.typedefs';\nimport { Input } from '../ui/Input/Input';\nimport { SelectUi } from '../ui/Select/Select';\nimport { findUserById, getTodoId, preparedTodos } from './helpers/app.heplers';\n\nexport const App = () => {\n  const [todoList, setTodoList] = useState<PreparedTodo[]>(preparedTodos);\n  const [title, setTitle] = useState('');\n  const [selectedUser, setSelectedUser] = useState('');\n  const [isTitleError, setIsTitleError] = useState(false);\n  const [hasSelectedError, setHasSelectedError] = useState(false);\n\n  const resetForm = () => {\n    setTitle('');\n    setSelectedUser('');\n    setHasSelectedError(false);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n\n    if (isTitleError) {\n      setIsTitleError(false);\n    }\n  };\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!title.trim()) {\n      setIsTitleError(true);\n    }\n\n    if (!selectedUser) {\n      setHasSelectedError(true);\n    }\n\n    if (!title.trim() || !selectedUser) {\n      return;\n    }\n\n    const newTodo: PreparedTodo = {\n      id: getTodoId(todoList),\n      title,\n      completed: false,\n      userId: Number(selectedUser),\n      user: findUserById(Number(selectedUser)),\n    };\n\n    setTodoList(currentTodos => [...currentTodos, newTodo]);\n\n    resetForm();\n  };\n\n  return (\n    <div className=\"app\">\n      <Paper elevation={5}>\n        <Box\n          sx={{\n            backgroundColor: 'lightgrey',\n          }}\n        >\n          <div className=\"app__body\">\n            <h1>Add todo form</h1>\n\n            <form onSubmit={onSubmit}>\n              <div className=\"gap\">\n                <Input\n                  title={title}\n                  handleChange={handleChange}\n                  isTitleError={isTitleError}\n                />\n\n                <SelectUi\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  hasSelectedError={hasSelectedError}\n                />\n\n                <Button\n                  sx={{ width: 'max-content' }}\n                  variant=\"contained\"\n                  endIcon={<SendIcon />}\n                  data-cy=\"submitButton\"\n                  type=\"submit\"\n                >\n                  Send\n                </Button>\n              </div>\n            </form>\n\n            <TodoList todos={todoList} />\n          </div>\n        </Box>\n      </Paper>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}