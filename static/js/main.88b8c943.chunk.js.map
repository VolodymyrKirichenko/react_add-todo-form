{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","props","user","className","href","email","name","TodoInfo","todo","title","id","completed","Paper","elevation","classNames","TodoList","todos","map","username","findUserById","userId","usersFromServer","find","preparedTodos","currentUser","App","useState","todoList","setTodoList","setTitle","selectedUser","setSelectedUser","isTitleError","setIsTitleError","hasSelectedError","setHasSelectedError","Box","sx","backgroundColor","onSubmit","event","preventDefault","trim","newTodo","Math","max","Number","currentTodos","TextField","width","label","variant","value","onChange","e","target","FormControl","m","margin","InputLabel","Select","labelId","input","OutlinedInput","MenuItem","Button","endIcon","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.88b8c943.chunk.js","sourcesContent":["import { FC } from 'react';\nimport { User } from '../../types/app.typedefs';\n\ninterface Props {\n  user: User,\n}\n\nexport const UserInfo: FC<Props> = (props) => {\n  const { user } = props;\n\n  return (\n    <a className=\"userInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport Paper from '@mui/material/Paper';\nimport { PreparedTodo } from '../../types/app.typedefs';\nimport { UserInfo } from '../UserInfo';\n\ninterface Props {\n  todo: PreparedTodo,\n}\n\nexport const TodoInfo: FC<Props> = ({ todo }) => {\n  const {\n    title,\n    id,\n    user,\n    completed,\n  } = todo;\n\n  return (\n    <Paper elevation={2}>\n      <article\n        data-id={id}\n        className={classNames('todoInfo', {\n          'todoInfo--completed': completed,\n        })}\n      >\n        <h2 className=\"todoInfo__title\">\n          {title}\n        </h2>\n\n        {user && (\n          <UserInfo user={user} />\n        )}\n      </article>\n    </Paper>\n  );\n};\n","import { FC } from 'react';\nimport { PreparedTodo } from '../../types/app.typedefs';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: PreparedTodo[];\n}\n\nexport const TodoList: FC<Props> = (props) => {\n  const { todos } = props;\n\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import './App.scss';\nimport React, { useState } from 'react';\nimport TextField from '@mui/material/TextField';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport Button from '@mui/material/Button';\nimport SendIcon from '@mui/icons-material/Send';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport { TodoList } from './components/TodoList';\nimport { PreparedTodo, User } from './types/app.typedefs';\nimport todosFromServer from './api/todos';\nimport usersFromServer from './api/users';\n\nconst findUserById = (userId: number): User | null => (\n  usersFromServer.find(user => user.id === userId) || null\n);\n\nconst preparedTodos: PreparedTodo[] = todosFromServer.map(todo => {\n  const currentUser = findUserById(todo.userId);\n\n  return {\n    ...todo,\n    user: currentUser,\n  };\n});\n\nconst getTodoId = (todos: PreparedTodo[]) => {\n  const newId = Math.max(...todos.map(todo => todo.id));\n\n  return newId + 1;\n};\n\nexport const App = () => {\n  const [todoList, setTodoList] = useState<PreparedTodo[]>(preparedTodos);\n  const [title, setTitle] = useState('');\n  const [selectedUser, setSelectedUser] = useState('');\n  const [isTitleError, setIsTitleError] = useState(false);\n  const [hasSelectedError, setHasSelectedError] = useState(false);\n\n  const resetForm = () => {\n    setTitle('');\n    setSelectedUser('');\n    setHasSelectedError(false);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n\n    if (isTitleError) {\n      setIsTitleError(false);\n    }\n  };\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!title.trim()) {\n      setIsTitleError(true);\n    }\n\n    if (!selectedUser) {\n      setHasSelectedError(true);\n    }\n\n    if (!title.trim() || !selectedUser) {\n      return;\n    }\n\n    const newTodo: PreparedTodo = {\n      id: getTodoId(todoList),\n      title,\n      completed: false,\n      userId: Number(selectedUser),\n      user: findUserById(Number(selectedUser)),\n    };\n\n    setTodoList(currentTodos => [...currentTodos, newTodo]);\n\n    resetForm();\n  };\n\n  return (\n    <div className=\"app\">\n      <Paper elevation={5}>\n        <Box\n          sx={{\n            backgroundColor: 'lightgrey',\n          }}\n        >\n          <div className=\"app__body\">\n            <h1>Add todo form</h1>\n\n            <form onSubmit={onSubmit}>\n              <div className=\"gap\">\n                <div className=\"field\">\n                  <div className=\"input\">\n                    <TextField\n                      sx={{ width: 300 }}\n                      id=\"outlined-basic\"\n                      label=\"Message\"\n                      variant=\"outlined\"\n                      value={title}\n                      onChange={handleChange}\n                    />\n                  </div>\n\n                  {isTitleError && (\n                    <span className=\"error\">Please enter a title</span>\n                  )}\n                </div>\n\n                <div className=\"field\">\n                  <div className=\"input\">\n                    <FormControl sx={{ m: 1, width: 300, margin: 0 }}>\n                      <InputLabel id=\"demo-multiple-name-label\">\n                        Name\n                      </InputLabel>\n\n                      <Select\n                        labelId=\"demo-multiple-name-label\"\n                        id=\"demo-multiple-name\"\n                        value={selectedUser}\n                        onChange={(event) => (\n                          setSelectedUser(event.target.value))}\n                        input={<OutlinedInput label=\"Name\" />}\n                      >\n                        {usersFromServer.map((user) => {\n                          const { id, name } = user;\n\n                          return (\n                            <MenuItem\n                              key={id}\n                              value={id}\n                            >\n                              {name}\n                            </MenuItem>\n                          );\n                        })}\n                      </Select>\n                    </FormControl>\n                  </div>\n\n                  <div>\n                    {(!selectedUser && hasSelectedError) && (\n                      <span className=\"error\">Please choose a user</span>\n                    )}\n                  </div>\n                </div>\n\n                <Button\n                  sx={{ width: 'max-content' }}\n                  variant=\"contained\"\n                  endIcon={<SendIcon />}\n                  data-cy=\"submitButton\"\n                  type=\"submit\"\n                >\n                  Send\n                </Button>\n              </div>\n            </form>\n\n            <TodoList todos={todoList} />\n          </div>\n        </Box>\n      </Paper>\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'Your code is beautiful',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'Better than anything I\\'ve ever seen',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'I agree with the person above',\n    completed: true,\n    userId: 4,\n  },\n  {\n    id: 3,\n    title: 'And I\\'m a hater, so I can\\'t say anything good',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}